package web

import (
	"encoding/json"
	"fmt"
	"html/template"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"sync"

	"github.com/Vaflel/lesson-counter/domain"
	"github.com/Vaflel/lesson-counter/usecases"
)

type Server struct {
	studentRepo  usecases.StudentRepository
	mu           sync.Mutex
	isProcessing bool
	reportReady  bool
	violations   []domain.Violation
	lessons      []domain.Lesson
	server       *http.Server
}

type CheckResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

type CheckRequest struct {
	WeekStart string `json:"weekStart"`
}

type StatusResponse struct {
	IsProcessing bool   `json:"isProcessing"`
	ReportReady  bool   `json:"reportReady"`
	Report       string `json:"report,omitempty"`
}

func NewServer(studentRepo usecases.StudentRepository) *Server {
	return &Server{
		studentRepo: studentRepo,
	}
}

func (s *Server) Start(port int) error {
	http.HandleFunc("/", s.handleIndex)
	http.HandleFunc("/check", s.handleCheck)
	http.HandleFunc("/status", s.handleStatus)
	http.HandleFunc("/students", s.handleStudents)
	http.HandleFunc("/students/edit/", s.handleEditStudent)
	http.HandleFunc("/students/delete/", s.handleDeleteStudent)
	http.HandleFunc("/shutdown", s.handleShutdown)
	http.HandleFunc("/static/", s.handleStatic)

	addr := fmt.Sprintf(":%d", port)
	s.server = &http.Server{Addr: addr}
	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s", addr)
	return s.server.ListenAndServe()
}

func (s *Server) handleIndex(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path != "/" {
		http.NotFound(w, r)
		return
	}

	tmpl, err := template.ParseFS(templates, "templates/index.html")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
		return
	}

	s.mu.Lock()
	data := struct {
		IsProcessing bool
		Report       template.HTML // –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –Ω–∞ template.HTML
	}{
		IsProcessing: s.isProcessing,
	}
	if s.reportReady {
		report, err := RenderViolations(s.violations, s.lessons)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ—Ç—á–µ—Ç–∞: %v", err)
			s.mu.Unlock()
			http.Error(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
			return
		}
		data.Report = template.HTML(report) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ template.HTML
	}
	s.mu.Unlock()

	if err := tmpl.Execute(w, data); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
	}
}

func (s *Server) handleCheck(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω", http.StatusMethodNotAllowed)
		return
	}

	var reqData CheckRequest
	if err := json.NewDecoder(r.Body).Decode(&reqData); err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", http.StatusBadRequest)
		return
	}

	if reqData.WeekStart == "" {
		http.Error(w, "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏", http.StatusBadRequest)
		return
	}

	s.mu.Lock()
	if s.isProcessing {
		s.mu.Unlock()
		http.Error(w, "–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", http.StatusTooManyRequests)
		return
	}
	s.isProcessing = true
	s.reportReady = false
	s.mu.Unlock()

	go func() {
		service := usecases.NewScheduleService(reqData.WeekStart)
		result, err := service.ProcessSchedule(reqData.WeekStart)
		s.mu.Lock()
		defer s.mu.Unlock()

		s.isProcessing = false
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %v", err)
			return
		}

		s.violations = result.Violations
		s.lessons = result.Lessons
		s.reportReady = true
	}()

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(CheckResponse{
		Success: true,
		Message: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞",
	})
}

func (s *Server) handleStatus(w http.ResponseWriter, r *http.Request) {
	s.mu.Lock()
	defer s.mu.Unlock()

	response := StatusResponse{
		IsProcessing: s.isProcessing,
		ReportReady:  s.reportReady,
	}
	if s.reportReady {
		var err error
		response.Report, err = RenderViolations(s.violations, s.lessons)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ—Ç—á–µ—Ç–∞: %v", err)
			http.Error(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
			return
		}
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func (s *Server) handleStudents(w http.ResponseWriter, r *http.Request) {
	tmpl, err := template.ParseFS(templates, "templates/students.html")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
		return
	}

	if r.Method == http.MethodPost {
		if err := r.ParseForm(); err != nil {
			http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã", http.StatusBadRequest)
			return
		}

		name := r.FormValue("name")
		group := r.FormValue("group")
		department := r.FormValue("department")
		year, err := strconv.Atoi(r.FormValue("year"))
		if err != nil || name == "" {
			http.Error(w, "–ü–æ–ª–µ name –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π year –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", http.StatusBadRequest)
			return
		}

		if err := s.studentRepo.AddStudent(domain.Student{
			Name:       name,
			Group:      group,
			Department: department,
			Year:       year,
		}); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: %v", err)
			http.Error(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
			return
		}

		http.Redirect(w, r, "/students", http.StatusSeeOther)
		return
	}

	students, err := s.studentRepo.LoadStudents()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
		return
	}

	sort.Slice(students, func(i, j int) bool {
		if students[i].Year != students[j].Year {
			return students[i].Year < students[j].Year
		}
		return strings.ToLower(students[i].Name) < strings.ToLower(students[j].Name)
	})

	if err := tmpl.Execute(w, struct{ Students []domain.Student }{students}); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
	}
}

func (s *Server) handleEditStudent(w http.ResponseWriter, r *http.Request) {
	name := filepath.Base(r.URL.Path)
	tmpl, err := template.ParseFS(templates, "templates/edit_student.html")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
		return
	}

	if r.Method == http.MethodGet {
		student, err := s.studentRepo.GetStudent(name)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: %v", err)
			http.Error(w, "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", http.StatusNotFound)
			return
		}
		if err := tmpl.Execute(w, student); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞: %v", err)
			http.Error(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
		}
		return
	}

	if r.Method == http.MethodPost {
		if err := r.ParseForm(); err != nil {
			http.Error(w, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã", http.StatusBadRequest)
			return
		}

		newName := r.FormValue("name")
		group := r.FormValue("group")
		department := r.FormValue("department")
		year, err := strconv.Atoi(r.FormValue("year"))
		if err != nil || newName == "" || group == "" || department == "" || year <= 0 {
			http.Error(w, "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –∫—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0", http.StatusBadRequest)
			return
		}

		if err := s.studentRepo.UpdateStudent(name, domain.Student{
			Name:       newName,
			Group:      group,
			Department: department,
			Year:       year,
		}); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: %v", err)
			http.Error(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
			return
		}

		http.Redirect(w, r, "/students", http.StatusSeeOther)
		return
	}

	http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω", http.StatusMethodNotAllowed)
}

func (s *Server) handleDeleteStudent(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω", http.StatusMethodNotAllowed)
		return
	}

	if err := s.studentRepo.DeleteStudent(filepath.Base(r.URL.Path)); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
		return
	}

	http.Redirect(w, r, "/students", http.StatusSeeOther)
}

func (s *Server) handleShutdown(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω", http.StatusMethodNotAllowed)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(struct {
		Success bool   `json:"success"`
		Message string `json:"message"`
	}{true, "–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É"})

	go func() {
		log.Println("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")
		if err := s.server.Shutdown(r.Context()); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: %v", err)
		}
		os.Exit(0)
	}()
}

func (s *Server) handleStatic(w http.ResponseWriter, r *http.Request) {
	filePath := "static/" + strings.TrimPrefix(r.URL.Path, "/static/")
	content, err := templates.ReadFile(filePath)
	if err != nil {
		http.Error(w, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", http.StatusNotFound)
		return
	}

	if strings.HasSuffix(r.URL.Path, ".css") {
		w.Header().Set("Content-Type", "text/css")
	} else if strings.HasSuffix(r.URL.Path, ".js") {
		w.Header().Set("Content-Type", "application/javascript")
	}
	w.Write(content)
}
